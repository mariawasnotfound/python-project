import logging 
from aiogram import Bot, Dispatcher, executor, types 
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton 
import psycopg2 
from psycopg2.extras import RealDictCursor 
 
logging.basicConfig(level=logging.INFO) 
 
BOT_TOKEN = '8182443228:AAGznPxs3-VV3LpeAcwKSHXKc8HvvPOqcqU' 
 
DB_CONFIG = { 
    'dbname': 'database_name',  
    'user': 'username',  
    'password': 'password',  
    'host': 'localhost',  
    'port': 5432 
} 
 
try: 
    conn = psycopg2.connect(**DB_CONFIG) 
    cursor = conn.cursor(cursor_factory=RealDictCursor) 
    logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö") 
except Exception as e: 
    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}") 
    exit() 
 
bot = Bot(token=BOT_TOKEN) 
dp = Dispatcher(bot) 
 
# –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ –º–µ—Å—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π 
location_button = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True) 
location_button.add(KeyboardButton("üåê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)) 
 
@dp.message_handler(commands=['start']) 
async def start_command(message: types.Message): 
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start""" 
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –∏ –ø–æ –º–µ—Å—Ç—É, –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",  
                        reply_markup=location_button) 
 
 
@dp.message_handler(content_types=['location']) 
async def handle_location(message: types.Message): 
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è""" 
    latitude = message.location.latitude 
    longitude = message.location.longitude 
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
    try: 
        cursor.execute("""INSERT INTO user_locations (user_id, latitude, longitude)  
                        VALUES (%s, %s, %s)  
                        ON CONFLICT (user_id) DO UPDATE  
                        SET latitude = EXCLUDED.latitude, longitude = EXCLUDED.longitude""",  
                       (user_id, latitude, longitude)) 
        conn.commit() 
    except Exception as e: 
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}") 
     
    await message.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.") 
 
@dp.message_handler(commands=['events']) 
async def show_events(message: types.Message): 
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /events""" 
    user_id = message.from_user.id 
    try: 
        cursor.execute("SELECT latitude, longitude FROM user_locations WHERE user_id = %s", (user_id,)) 
        location = cursor.fetchone() 
    except Exception as e: 
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}") 
        location = None 
 
    try: 
        if location: 
            # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ –º–µ—Å—Ç—É 
            cursor.execute(""" 
                SELECT * FROM events  
                WHERE (earth_distance(ll_to_earth(latitude, longitude), ll_to_earth(%s, %s)) < 5000)  
                AND start_time >= NOW() AND start_time <= NOW() + interval '12 hours'  
                ORDER BY start_time ASC LIMIT 5 
            """, (location['latitude'], location['longitude'])) 
        else: 
            # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏) 
            cursor.execute(""" 
                SELECT * FROM events  
                WHERE start_time >= NOW() AND start_time <= NOW() + interval '12 hours'  
                ORDER BY start_time ASC LIMIT 5 
            """) 
 
        events = cursor.fetchall()

        if events: 
            response = "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n" 
            for event in events: 
                status = event.get('availability_status', '–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ —É—Ç–æ—á–Ω–µ–Ω–∏–∏') 
                response += f"\n‚ú® {event['title']} \n‚è∞ –í—Ä–µ–º—è: {event['start_time']} \n‚òû –ú–µ—Å—Ç–æ: {event['location']} \n‚ùì –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç: {status}\n" 
                response += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {event['link']}\n" 
        else: 
            response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await message.reply(response) 
    except Exception as e: 
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}") 
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=['available']) 
async def check_availability(message: types.Message): 
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏""" 
    event_id = message.get_args() 
     
    if not event_id: 
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /available 123") 
        return 
     
    try: 
        cursor.execute("SELECT available_status FROM events WHERE id = %s", (event_id,)) 
        event = cursor.fetchone() 
        if event: 
            status = event['available_status'] or '–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ —É—Ç–æ—á–Ω–µ–Ω–∏–∏' 
            await message.reply(f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {status}") 
        else: 
            await message.reply("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.") 
    except Exception as e: 
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç: {e}") 
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç.") 
 
 
if name == '__main__': 
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω") 
    executor.start_polling(dp, skip_updates=True)
