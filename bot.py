import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ContentType
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from geopy.distance import geodesic
from database import SessionLocal
from models import Event
from scraper import fetch_events, save_events_to_db

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN", "8182443228:AAGznPxs3-VV3LpeAcwKSHXKc8HvvPOqcqU")
if not TOKEN:
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def welcome(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –∏ –ø–æ –º–µ—Å—Ç—É.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True
        )
    )

@dp.message(lambda message: message.location is not None)
async def handle_location(message: Message): 
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è""" 
    if message.location:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é 
        try: 
            user_lat = message.location.latitude 
            user_lon = message.location.longitude 
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: —à–∏—Ä–æ—Ç–∞ {user_lat}, –¥–æ–ª–≥–æ—Ç–∞ {user_lon}") 
 
            # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ 
            events = fetch_events() 
            save_events_to_db(events) 
 
            response = "üéâ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 10 –∫–º:\n\n" 
            count = 0 
 
            for event in events: 
                if event.latitude and event.longitude: 
                    event_coords = (event.latitude, event.longitude) 
                    user_coords = (user_lat, user_lon) 
                    distance = geodesic(user_coords, event_coords).kilometers 
                    if distance <= 10: 
                        event_time = event.time if event.time else "–í—Ä–µ–º—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è" 
                        response += f"üìç {event.title} ({event.location}) - {event_time}\n" 
                        count += 1 
 
            if count == 0: 
                response += "üòî –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." 
            await message.answer(response) 
        except Exception as e: 
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏") 
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.") 
    else: 
        logging.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

@dp.message(Command("events"))
async def send_upcoming_events(message: Message): 
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"""
    session = SessionLocal()
    try:
        events = session.query(Event).order_by(Event.time).limit(5).all()
        response = "üéâ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n"
        if not events:
            response += "üòî –ü–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            for event in events:
                event_time = event.time if event.time else "–í—Ä–µ–º—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
                response += f"üìç {event.title} ({event.location}) - {event_time}\n"
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logging.info("–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())




