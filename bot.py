from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, Location
from database import SessionLocal, Event
import asyncio
import os
from geopy.distance import geodesic

TOKEN = os.getenv("8182443228:AAGznPxs3-VV3LpeAcwKSHXKc8HvvPOqcqU")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def welcome(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –∏ –º–µ—Å—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", 
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        )
    )

@dp.message_handler(content_types=["location"])
async def send_nearby_events(message: Message):
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    session = SessionLocal()
    events = session.query(Event).all()

    response = "üéâ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
    count = 0
    for event in events:
        if event.latitude and event.longitude:
            event_coords = (event.latitude, event.longitude)
            user_coords = (user_lat, user_lon)
            distance = geodesic(user_coords, event_coords).kilometers
            if distance <= 10:
                response += f"üìç {event.title} ({event.location}) - {event.time}\n"
                count += 1

    if count == 0:
        response += "üòî –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(response)

@dp.message_handler(commands=["events"])
async def send_upcoming_events(message: Message):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞). """
    session = SessionLocal()
    events = session.query(Event).order_by(Event.time).limit(5).all()
    response = "üéâ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
    for event in events:
        response += f"üìç {event.title} ({event.location}) - {event.time}\n"

    await message.answer(response)

async def main():
    await dp.start_polling(skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())

